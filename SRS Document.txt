Online Application Title: Online Home Services
Team:	Kalyani Kapse
	Karishma Kalambe
	
SRS Document:
List Of Actors
1.	Customer
2.	Admin
3.	Worker

1.Introduction
1.1 Purpose:
This document is meant to delineate the features of Online Home Services(OHS),so as to serve as a guide to the developers on one hand and a software validation document for the prospective client on the other.
	The purpose of this project is to provide the common platform for both customers (users) as well as workers to fulfil their needs. The customers will visit the website and will book the service whichever required.  On the others side there are plenty of workers who have already registered on the website to serve the services requested by the customers. Once the service is booked by the customer, the system will allot this booked service to the nearby worker from customer’s address. The worker has to visit the customer’s address on the time given by the customer and has to complete the designated work. Once the requested service is complete, customer will pay the worker and worker will acknowledge about the completion of the work.

1.2 Scope
This system allows the customer’s to book services,search for particular services,cancel bookings etc.
This system allows the worker's to see if he has got any bookings,worker can notify if he is on leave,worker recieved payment or not,etc.
The system allows the admin to add or remove worker,he can add or remove one or more services,anaylsis of services,etc.

1.3 Functional requirement:
	The functional Requirements (also called Functional Specifications or Functional Requirement Specifications), defines the capabilities and functions that a System must be able to perform successfully.
The functional specification describes what the system must do; how the system does it is described in the Design Specification.
It should include functions performed by specific screens, outlines of work-flows performed by the system and other business or compliance requirements the system must meet.

Requirements:
1.	Customer
i.	Customer should be able to book a service.
ii.	Customer should be able to see all the services, subservices and their costs.
iii.	Customer should be able to drop the service which was booked earlier.
iv.	Customer should be able to provide the feedback once the service is completed (if he wants to.)

2.	Administrator
i.	Admin should be able to acknowledge the request for the new worker.
ii.	Admin should also be able to remove the worker from the workers list.

3.	Worker
i.	A new worker should be able to make a request to register himself.
ii.	A worker should be able to login once the registration is completed.
iii.	After login worker should be able to see his/her history records (name of the customer to whom services are provided, 		payment received, ratings and comments if provided by customer.)
iv.	Workers should be able to acknowledge once the work provided to him is finished.
v.	Worker should also be able to notify the system if he is at leave.

1.3.1 List of features:
	1.	The application should provide facility for customers to book a service.
	2.	The application should display all the services and subservices for the customers.
	3.	The application should allow the administrator to acknowledge the request for worker registration and also to 			remove the worker who is already registered.
	4.	The application should allow the worker to login, see his/her history record and should also provide the facility for 			the worker to acknowledge once the service is provided.

Non-Functional Requirements
1.Security:
  SSL
	
	The system must automcatically log out all customers after a period of inactivity.
	The system should not leave any cookies on the customer's computer containing users's password.
	The system's back-end servers shall  only be accessible to authenticated administrators.
	Sensitive data will be encrypted  before being sent onver insecure connections like internet.
        The proper firewalls should be developed to avoid intrusions from the internal or external sources.
2.Reliability:
	The system provides storage of all databases on redundant computers with  automatic switchover. 
	The main pillar of reliability of the system  is the backup of the database 
	which is conitinously maintained and update to reflect  the most recenet changes.
3: Availability:
	The system should be available at all times.meaning the user can access it using web browser, 
        only restricted by the down time of the server on which the system runs.
        In case of a of a hardware failure or database corruption, a replacement page will be shown. 
	uptime : It mean 24 * 7 availability
	100%--------------
	99.9%
	99.999%
	99.9999%


4: Maintainability:
	A commercial database is used for maintaining the databae and application server takes care of the site. 
	The maintainability can be done efficiently.
5.Portability:
	The application is HTML and scripting language based (Javascript). So the end user part is fully portable and any system using 
	any web browser should be able to use the features of the system,including any hardware platform that is available 
	or will be available in the futuer. 
	An end-user  is used this system on an OS;either it is Windows or Linux.
	The System shall run on PC, Laptops and PDA.etc.
	The  technology should be transferable to different environments easily.

6.Accessibility:
        Only registered users should be allowed to process the orders after authentications.
        Only GUI access of the system should be permited to end users.

7.Policies:
       The system should adhere to all the legal formalities of the particular countries.
       The system should maintain security related to sensitive data.

8.Efficiency:
	The system should provide good throughput and response to multiple users without burdening the system by using appropriate number of servers.

9.Safety:
      Software should not harm ethical and environmental conditions of the end users machine.

10.Modulariy:
      The system should have user friendly interface. 
      It should be easily updated,modified and reused. 


ER Listing:
People
	email,
	password,
	
Customer
	customerId(pk),
	firstname,
	lastname,
	email(u),
	mobileNo(u),
	date of birth,
	address,
	city,
	state,
	pincode,
	country,
	password,
	gender

Worker
	workerId(pk),
	firstname,
	lastname,
	email(u),
	mobileNo(u),
	city,
	state,
	pincode,
	country,
	password,
	jobName,
	gender,
	onLeave
	
Admin
	adminId(pk),
	firstname,
	lastname,
	email(u),
	mobileNo(u),
	password

services
	JobId(pk),
	jobName(u),
	jobDesciprtion,
	price,
	discount

JobAllocations
	jobname,(fk)
	workerid(fk)

ServiceAllocations
	customerId(fk),
	workerId(fk),
	JobId(fk),
	serviceBook date,
	service date,
	paymentId,
	paymentDate,
	work status,
	
feedback
	email(u),
	rating,
	suggestion,
	workerId(fk),
	customerId(fk)

	
Application Architecture:

	Application = 
			Logic 	+  data

	Logic =(UI Logic  + Business Logic + DataAccess Logic) 
	Data  =( structured data , Non Structured data)

Online Application:

	    Web based Application
		    deployed on web and accessed by users from anywhere

		    Online Home Services------Web portal-- used remotely by endusers,
							                   vendors,
								           employees
Logic:
     UI Logic:

		 Web Pages +  HTML controls + Web Components (Angular)
		 Navigation : (UI Routing) HTML Links, Routing mechansim
		 Data Binding : DOM  + JSP tags (JSTL) + {{}} ngModel,
		 
		 Event Binding : 				action handlers
					
				 
			HTTP Request:	GET:----------------Doget
					POST:---------------Dopost
					PUT:
					DELETE:

              Client Side UI----------------HTML, CSS, javaScript, bootstrap
					        UI (Client Side UI Framework)
						Angular, React, Vue,..........

	Web Logic: ( Server Side processing)

		Server UI---------------- JSP, servelet,  ( classical java web technology)
				 spring MVC  ( to take advantage of MVC design Pattern using ready made frmwrk)
						 Model, View, Controller
						 Router
						 (SOA  layer)
						Spring Boot api
						CRUD REST API
						ORM Technique:Hibernate  ( ORM)
						       ,JPA
				         	JDBC  ( database Connectivity)
		State management
				
		 	Client Side state management
				cookies, querystring, form collection, hidden variables
				 local storage, session storage, Web sql, 

			Server Side state management
				session, Cache,
				database
	Business Logic:
		
	
		Java console application will be used to test your business Logic

		Core Java:

		will contain
		 1.business query processing
		 2.business operation managment
		 3.Business data manipulation
		
	   from online home services point of view

		1.authentication:
				validate by email and password
				
		2. registration:
				inventory(customers,worker)
					create,insert,delete
				category
					get all workers
					get all customers
					get all workers by rating
					get all workers by services
					update profile
					update password
						
		3. ServiceCatalog
				Service Inventory
					create, insert, delete
				Service Category 
					 get all services
					 get all services by category
					 get all services by discount
					 get all services by rating
					
		4. Booking:	
				Book Service
				Cancel Service
				get all booked service
				update booking
				get all booking by customers
				get all booking by workers
				get booking by date
				
				
		5. payment
				get all payment
				get payment by customer
				get payment by service
				get complete payment details by customer
				get payment by date
		
		6. leave	
				request leave
				leave history
				approve/reject history

		
						

Data :
		 Structured Data
			 RDBMS
				fields
				tables
				contstraints

				Add some dummy records in your newly created database

				write  reusable SQL queries against those database tables to check bussiness Queries
				Test those SQL queries on existing dummy database you built
					
				List of tables
People
	fields:
		email(u),password
	
Customers
	fields:
		customerId(pk),firstname,lastname,email(u),mobileNo(u),date of birth,address,city,state,pincode,country,password,gender

Workers
	fields:
		workerId(pk),firstname,lastname,email(u),mobileNo(u),city,state,pincode,country,password,jobName,gender,status
	
Admins
	fields:
		adminId(pk),firstname,lastname,email(u),mobileNo(u),password,gender

services
	fields:
		JobId(pk),jobName(u),jobDesciprtion,price,discount

JobAllocation:
	fields:
		jobname(fk),workerid(fk)

ServiceAllocation
	
	fields:
		customerId(fk),workerId(fk),JobId(fk),serviceBook date,service date,payment,work status

feedback:
	fields:
		email(u),rating,suggestion,workerId(fk),customerId(fk)

		
		Create .sql file
			  ddl.sql--->file will contain   DDL commands for Table creation
			  dml.sql--->file will contain   insert commands for filling dummy data to tables which we have created
			  bqyery.sql-->file will conatin   SQL queries mapped for business queries

